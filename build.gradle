buildscript {
    ext {
        springBootVersion = '2.5.4'
        kotlinVersion = '1.5.31'
        kotestVersion = '4.4.3'
        springCloudVersion = '2020.0.4'
        embeddedRedisVersion = "0.7.2"
    }
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }

    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
    }
}

subprojects {
    group = 'com.depromeet.dgdg'

    apply {
        plugin('java-library')
        plugin('eclipse')
        plugin('org.springframework.boot')
        plugin('io.spring.dependency-management')
        plugin('kotlin')
        plugin('kotlin-spring')
        plugin('kotlin-jpa')
        plugin('kotlin-kapt')
        plugin('jacoco')
    }

    sourceCompatibility = '11'

    compileKotlin {
        kotlinOptions {
            jvmTarget = "11"
            freeCompilerArgs = ["-Xjsr305=strict"]
        }
    }
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "11"
            freeCompilerArgs = ["-Xjsr305=strict"]
        }
    }

    repositories {
        mavenCentral()
    }

    jacoco {
        toolVersion = "0.8.7"
        reportsDir = file("${rootProject.projectDir}/build")
    }

    dependencies {
        implementation("org.springframework.boot:spring-boot-starter-validation")
        testImplementation('org.springframework.boot:spring-boot-starter-test')
        annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

        // kotlin
        implementation("org.jetbrains.kotlin:kotlin-stdlib")
        implementation("org.jetbrains.kotlin:kotlin-reflect")
        implementation("com.fasterxml.jackson.module:jackson-module-kotlin")

        // kotest
        testImplementation("io.kotest:kotest-runner-junit5:${kotestVersion}")
        testImplementation("io.kotest:kotest-extensions-spring:${kotestVersion}")
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }


    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            html.enabled true
        }

        // QueryDSL codecov report 대상 제외
        def Qdomains = []
        for(qPattern in "**/QA" .. "**/QZ"){
            Qdomains.add(qPattern+"*")
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [] + Qdomains)
            }))
        }

    }
}

